# -*- coding: utf-8 -*-
"""Práctico 5: Listas - Alumno: Calcatelli Renzo

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1URaef7It7shRazv0qOo7bGK7bodp-LMX

# **Práctico 5: Listas**
**Alumno:** Calcatelli Renzo.


> **Objetivo:**
Desarrollar la comprensión y la capacidad de manipular listas en Python mediante la aplicación de conceptos fundamentales como la indexación, la
modificación de elementos, el uso de métodos integrados y el manejo de
listas anidadas.

### **Actividad 1: Crear una lista con múltiplos de 4 del 1 al 100**

**Proceso de Resolución:**

1.   **Entender el objetivo:** Necesitamos generar una secuencia de números que cumplan dos condiciones: estar dentro del rango del 1 al 100 (inclusive) y ser divisibles por 4 (es decir, múltiplos de 4).
2.   **Utilizar la función range():** La función range() en Python es ideal para generar secuencias numéricas. Nos permite especificar un inicio, un final (no incluido) y un paso.
3.   **Determinar los parámetros de range():**

  *   **Inicio:** El primer múltiplo de 4 dentro del rango del 1 al 100 es el 4. Por lo tanto, nuestro inicio será 4.
  *   **Final:** Queremos incluir múltiplos hasta el 100. La función range() se detiene antes del valor final, así que necesitamos un valor que sea mayor que 100. Podemos usar 101.
  *   **Paso:** Queremos múltiplos de 4, así que el paso será 4.

4.   Generar la secuencia: Usaremos range(4, 101, 4) para crear la secuencia de números deseada.
5.   Convertir la secuencia a una lista: La función range() devuelve un objeto iterable (una secuencia), pero la actividad pide una lista. Podemos convertir esta secuencia a una lista utilizando la función list().

#### **Código en Python:**
"""

multiplos_de_cuatro = list(range(4, 101, 4))
print(multiplos_de_cuatro)

"""**Explicación:**


*   `range(4, 101, 4)` genera la secuencia: 4, 8, 12, ..., 96, 100.
*   `list(...)` toma esta secuencia y la convierte en una lista, almacenándola en la variable multiplos_de_cuatro.
*   `print(multiplos_de_cuatro)` muestra la lista resultante por pantalla.

### **Actividad 2: Mostrar el penúltimo elemento de una lista**

**Proceso de Resolución:**


1.   **Crear una lista:** Primero, necesitamos una lista con cinco elementos de nuestra elección.
2.   **Acceder al penúltimo elemento:** Hay dos formas principales de hacerlo:


*   **Usando indexación con números negativos:** Los índices negativos en Python acceden a los elementos desde el final de la lista. El último elemento tiene el índice `-1`, el penúltimo tiene el índice `-2`, y así sucesivamente.
*   **Usando la longitud de la lista:** Podemos obtener la longitud de la lista con la función `len()` y luego usar ese valor para calcular el índice del penúltimo elemento (que sería `longitud - 2`, recordando que los índices comienzan en 0).

#### **Código en Python (opción con índice negativo):**
"""

mi_lista_favorita = ["libro", "café", "música", "viajar", "playa"]
penultimo_elemento = mi_lista_favorita[-2]
print(f"El penúltimo elemento es: {penultimo_elemento}")

"""#### **Código en Python (opción con longitud):**"""

mi_lista_favorita = ["libro", "café", "música", "viajar", "playa"]
penultimo_indice = len(mi_lista_favorita) - 2
penultimo_elemento = mi_lista_favorita[penultimo_indice]
print(f"El penúltimo elemento es: {penultimo_elemento}")

"""**Explicación:**

*   En ambas opciones, primero creamos una lista llamada mi_lista_favorita.
*   **Opción con índice negativo:** `mi_lista_favorita[-2]` accede directamente al segundo elemento contando desde el final de la lista.
*   **Opción con longitud:**
  *   `len(mi_lista_favorita)` devuelve la cantidad de elementos en la lista (que es 5).
  *   Restamos 2 a la longitud (5 - 2 = 3) para obtener el índice del penúltimo elemento (índice 3 corresponde a "viajar"). ¡Ojo! Aquí hubo un error en el razonamiento inicial. El penúltimo índice es `len(lista) - 2`, que sería `5 - 2 = 3`. Sin embargo, el elemento en ese índice es el penúltimo. La corrección sería:
      *   El último índice es `len(lista) - 1` (5 - 1 = 4, "playa").
      *   El penúltimo índice es `len(lista) - 2` (5 - 2 = 3, "viajar").
  *   `mi_lista_favorita[penultimo_indice]` accede al elemento en ese índice.
*   Finalmente, se imprime el penúltimo elemento.

### **Actividad 3: Crear una lista vacía y agregar palabras**

**Proceso de Resolución:**


1.   **Crear una lista vacía:** Tal como se indica en la pista, una lista vacía se crea utilizando corchetes sin nada en su interior: [].
1.   **Utilizar el método `append()`:** El método `append()` es un método integrado de las listas en Python que permite añadir un elemento al final de la lista.
2.   **Agregar tres palabras:** Llamaremos al método `append()` tres veces, cada vez con una palabra diferente como argumento.
2.   **Imprimir la lista resultante:** Usaremos la función `print()` para mostrar el contenido de la lista después de agregar las palabras.

#### **Código en Python:**
"""

lista_de_palabras = []
lista_de_palabras.append("sol")
lista_de_palabras.append("luna")
lista_de_palabras.append("estrella")
print(lista_de_palabras)

"""**Explicación:**


*   `lista_de_palabras = []` crea una lista vacía.
*   `lista_de_palabras.append("sol")` añade la cadena "sol" al final de la lista.
*   `lista_de_palabras.append("luna")` añade la cadena "luna" al final de la lista.
*   `lista_de_palabras.append("estrella")` añade la cadena "estrella" al final de la lista.
*   `print(lista_de_palabras)` muestra la lista resultante: `['sol', 'luna', 'estrella']`.

### **Actividad 4: Reemplazar elementos en la lista "animales"**

**Proceso de Resolución:**


1.   Entender el objetivo: Necesitamos modificar la lista `animales` reemplazando el segundo elemento y el último elemento con valores específicos.
2.   Acceder al segundo elemento: El segundo elemento de la lista tiene un índice de `1` (recordando que la indexación comienza en 0).
3.   Acceder al último elemento: El último elemento de la lista se puede acceder utilizando el índice `-1`.
4.   Realizar la asignación: Utilizaremos la sintaxis de asignación (`=`) para reemplazar los valores en las posiciones correspondientes.
5.   Imprimir la lista resultante: Usaremos `print()` para verificar los cambios.

#### **Código en Python:**
"""

animales = ["perro", "gato", "conejo", "pez"]
animales[1] = "loro"  # Reemplaza el segundo elemento (índice 1) con "loro"
animales[-1] = "oso"  # Reemplaza el último elemento (índice -1) con "oso"
print(animales)

"""**Explicación:**


*   `animales = ["perro", "gato", "conejo", "pez"]` inicializa la lista.
*   `animales[1] = "loro"` accede al elemento en el índice 1 (que es "gato") y lo reemplaza con la cadena "loro".
*   `animales[-1] = "oso"` accede al último elemento de la lista (que es "pez") y lo reemplaza con la cadena "oso".
*   `print(animales)` muestra la lista modificada: `['perro', 'loro', 'conejo', 'oso']`.







"""